// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package fiftyonedegrees.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.core.Core;
import fiftyone.mobile.detection.Match;
import fiftyone.mobile.detection.Provider;
import fiftyone.mobile.detection.factories.StreamFactory;
import java.io.File;
import fiftyonedegrees.proxies.Browser;

/**
 * Try to detect browser properties and features from a browser user agent string. This uses the 51Degrees Lite library.
 */
public class DetectBrowser extends CustomJavaAction<IMendixObject>
{
	private java.lang.String UserAgent;

	public DetectBrowser(IContext context, java.lang.String UserAgent)
	{
		super(context);
		this.UserAgent = UserAgent;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		IMendixObject result = null;

		if (this.UserAgent == null) {
			return null;
		}

        Provider provider = new Provider(StreamFactory.create(
			Core.getConfiguration().getResourcesPath() + File.separator + "51Degrees.dat", false));

		try {
			Match match = provider.match(this.UserAgent);

			Browser browser = new Browser(this.context());
			// https://51degrees.com/resources/property-dictionary#
			browser.setIsMobile(parseBoolean(match.getValues("IsMobile").toString()));
			browser.setScreenPixelsHeight(parseInt(match.getValues("ScreenPixelsHeight").toString()));
			browser.setScreenPixelsWidth(parseInt(match.getValues("ScreenPixelsWidth").toString()));
			browser.setPlatformName(match.getValues("PlatformName").toString());
			browser.setPlatformVersion(match.getValues("PlatformVersion").toString());
			browser.setBrowserName(match.getValues("BrowserName").toString());
			browser.setBrowserVersion(match.getValues("BrowserVersion").toString());
			result = browser.getMendixObject();
		} finally {
			provider.dataSet.close();
		}

		return result;

		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DetectBrowser";
	}

	// BEGIN EXTRA CODE
	/**
	 * Parse a string as an integer, or return null if it can't be parsed.
	 */
	protected Integer parseInt(String string) 
	{
		Integer result = null;
		try {
			result = Integer.parseInt(string);
		} catch (Exception e) {
			// leave the result as null.
		}
		return result;
	}

	/**
	 * Parse a string as a Boolean, or return null if it can't be parsed.
	 */
	protected Boolean parseBoolean(String string)
	{
		Boolean result = null;
		try {
			result = Boolean.parseBoolean(string);
		} catch (Exception e) {
			// leave the result as null
		}
		return result;
	}
	// END EXTRA CODE
}
